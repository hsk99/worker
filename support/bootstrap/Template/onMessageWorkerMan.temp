<?php

namespace App\Callback\{_process_};

class onMessage
{
    public static function init($connection, $message)
    {
        if (in_array($connection->worker->protocol, ["\Workerman\Protocols\Http", "Workerman\Protocols\Http"])) {
            self::httpRequest($connection, $message);
        } else {
            $message_data = json_decode($message, true);
            if (empty($message_data) || !is_array($message_data)) {
                $connection->send(json(['type' => 'error', 'msg' => '非法操作，传输数据不是JSON格式']));
                return;
            }

            if (!empty($message_data['type']) && !is_array($message_data['type'])) {
                self::singleRequest($connection, $message_data);
            } else {
                self::multipleRequest($connection, $message_data);
            }
        }
    }

    protected static function httpRequest($connection, $message)
    {
        $url = $message->path();

        if (strpos($url, '/') === 0) {
            $url = substr($url, 1, strlen($url) - 1);
        }

        $piece = count(explode('/', $url));

        switch ($piece) {
            case '1':
                if ($url === "") {
                    $controller = parse_name('index', 1);
                    $action     = parse_name('index');
                } else {
                    $controller = parse_name($url, 1);
                    $action     = parse_name($url);
                }
                $module = "";
                break;
            case '2':
                list($controller, $action) = explode('/', $url, 2);
                $module     = "";
                $controller = parse_name($controller, 1);
                $action     = parse_name($action, 1, false);
                break;
            case '3':
                list($module, $controller, $action) = explode('/', $url, 3);
                $module     = "\\" . parse_name($module, 1);
                $controller = parse_name($controller, 1);
                $action     = parse_name($action, 1, false);
                break;
            default:
                $connection->send(json(['type' => 'error', 'msg' => '非法操作！']));
                return;
                break;
        }

        if (is_callable("\\App\\Message\\{_process_}{$module}\\{$controller}::{$action}")) {
            call_user_func("\\App\\Message\\{_process_}{$module}\\{$controller}::{$action}", $connection, $message);
        } else {
            $connection->send(json(['type' => 'error', 'msg' => '非法操作！']));
        }
    }

    protected static function singleRequest($connection, $message_data)
    {
        $type  = $message_data['type'];
        $piece = count(explode('.', $type));

        switch ($piece) {
            case '1':
                $module     = "";
                $controller = parse_name($type, 1);
                $action     = parse_name($type, 1, false);
                break;
            case '2':
                list($controller, $action) = explode('.', $type, 2);
                $module     = "";
                $controller = parse_name($controller, 1);
                $action     = parse_name($action, 1, false);
                break;
            case '3':
                list($module, $controller, $action) = explode('.', $type, 3);
                $module     = "\\" . parse_name($module, 1);
                $controller = parse_name($controller, 1);
                $action     = parse_name($action, 1, false);
                break;
            default:
                $module = $controller = $action = "";
                break;
        }

        if (!empty($controller) && !empty($action) && is_callable("\\App\\Message\\{_process_}{$module}\\{$controller}::{$action}")) {
            $return = ("\\App\\Message\\{_process_}{$module}\\{$controller}::{$action}")($connection, $message_data);
            if (empty($result)) {
                return;
            }
        } else {
            $return = ['code' => 400, 'msg' => '非法操作，方法不存在'];
        }
        $return['type'] = $type;

        $connection->send(json($return));
    }

    protected static function multipleRequest($connection, $message_data)
    {
        foreach ($message_data as $type => $data) {
            if (empty($data['cmd_sequence'])) {
                $return[$type] = ['code' => 400, 'msg' => '非法操作，指令序列号不存在'];
                continue;
            }

            $piece = count(explode('.', $type));
            switch ($piece) {
                case '1':
                    $module     = "";
                    $controller = parse_name($type, 1);
                    $action     = parse_name($type, 1, false);
                    break;
                case '2':
                    list($controller, $action) = explode('.', $type, 2);
                    $module     = "";
                    $controller = parse_name($controller, 1);
                    $action     = parse_name($action, 1, false);
                    break;
                case '3':
                    list($module, $controller, $action) = explode('.', $type, 3);
                    $module     = "\\" . parse_name($module, 1);
                    $controller = parse_name($controller, 1);
                    $action     = parse_name($action, 1, false);
                    break;
                default:
                    $module = $controller = $action = "";
                    break;
            }

            if (!empty($controller) && !empty($action) && is_callable("\\App\\Message\\{_process_}{$module}\\{$controller}::{$action}")) {
                $result = ("\\App\\Message\\{_process_}{$module}\\{$controller}::{$action}")($connection, $data);
                if (empty($result)) {
                    return;
                }
                $return[$type] = array_merge(['cmd_sequence' => $data['cmd_sequence']], $result);
            } else {
                $return[$type] = ['code' => 400, 'msg' => '非法操作，方法不存在'];
            }
        }

        $connection->send(json($return));
    }
}
